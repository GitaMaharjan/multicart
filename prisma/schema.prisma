generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  firstName         String      @db.VarChar(100)
  lastName          String      @db.VarChar(100)
  email             String      @unique @db.VarChar(255)
  password          String      @db.VarChar(255) 
  phoneNumber       String?     @db.VarChar(20)
  gender            Gender?
  registrationDate  DateTime    @default(now())
  lastLogin         DateTime?
  profileImage      String?     @db.VarChar(500)
  userType          UserType    @default(CUSTOMER)
  status            UserStatus  @default(ACTIVE)
  isVerifiedSeller  Boolean     @default(false)

  // Relationships
  reports           Report[]
  payments          Payment[]
  orders            Order[]
  cart              Cart?
  reviews           Review[]
  stores            Store[]

  // Indexes for performance optimization
  @@index([email])
  @@index([registrationDate])
  @@index([status])
  @@index([userType])
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UserType {
  CUSTOMER
  SELLER
  ADMIN
}

model Report {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  status    String
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  total     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  products  OrderProduct[]
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  productId String

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id        String   @id @default(uuid())
  name      String
  price     Float
  stock     Int
  createdAt DateTime @default(now())
  
  reviews   Review[]
  cartItems CartItem[]
  orders    OrderProduct[]
  storeId   String?
  store     Store?   @relation(fields: [storeId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())

  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Store {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  products  Product[]
}

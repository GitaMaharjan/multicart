generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  firstName        String      @db.VarChar(100)
  lastName         String      @db.VarChar(100)
  email            String      @unique @db.VarChar(255)
  password         String      @db.VarChar(255)
  phoneNumber      String     @db.VarChar(20)
  gender           Gender
  registrationDate DateTime    @default(now())
  lastLogin        DateTime?
  profileImage     String?     @db.VarChar(500)
  userType         UserType    @default(CUSTOMER)
  status           UserStatus  @default(ACTIVE)
  isVerifiedSeller Boolean     @default(false)

  // Relations
  stores           Store[]

  // Indexes
  @@index([registrationDate])
  @@index([status])
  @@index([userType])

  @@map("users")  

}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UserType {
  CUSTOMER
  SELLER
  ADMIN
}

model Store {
  id          String     @id @default(cuid())
  name        String
  description String?
  seller      User       @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    String
  categories  Category[]
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("stores")

}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId     String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")

}

model Product {
  id         String    @id @default(cuid())
  name       String
  description String
  price      Float
  stock      Int
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId    String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String    
  image      String    
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("products")
}


